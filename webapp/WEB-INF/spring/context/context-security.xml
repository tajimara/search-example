<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-3.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">


<!-- enable use-expressions -->
    <http auto-config="true" use-expressions="true">
        <form-login login-processing-url = "/authentication"
                    username-parameter="userId"
                    password-parameter="password"
                    login-page = "/account/login"
                    authentication-failure-url="/account/login?error"
                    authentication-failure-handler-ref="loginFailureHandler"
                    authentication-success-handler-ref="loginSuccessHandler"
                />
        <logout invalidate-session="true" logout-url="/account/logout" success-handler-ref="logoutSuccessHandler" />
        <remember-me services-ref="rememberMeServices" key="testKeyForBlog" />
        <intercept-url pattern="/account/**" access="permitAll"/>
        <intercept-url pattern="/static/**" access="permitAll"/>
        <intercept-url pattern="/error/**" access="permitAll"/>
        <intercept-url pattern="/console/**" access="hasRole('ROLE_USER')"/>
        <intercept-url pattern="/**" access="permitAll"/>
        <custom-filter ref="socialAuthenticationFilter" before="PRE_AUTH_FILTER" />     <!-- /auth/** 형식의 요청을 처리할수 있도록 한다. -->
        <session-management>
            <concurrency-control max-sessions="4" />
        </session-management>
    </http>
    <beans:bean id="loginFailureHandler" class="io.test.www.security.LoginFailureHandler"/>
    <beans:bean id="loginSuccessHandler" class="io.test.www.security.LoginSuccessHandler"/>
    <beans:bean id="logoutSuccessHandler" class="io.test.www.security.LogoutSuccessHandler"/>

    <beans:bean id="rememberMeServices"
          class="org.springframework.security.web.authentication.rememberme.PersistentTokenBasedRememberMeServices">
        <beans:property name="tokenRepository" ref="customTokenRepository" />
        <beans:property name="userDetailsService" ref="userDetailsService" />
        <beans:property name="tokenValiditySeconds" value="8640000"/>
        <beans:property name="key" value="testKeyForBlog" />
    </beans:bean>

    <authentication-manager alias="authenticationManager">
        <authentication-provider user-service-ref="userDetailsService" >
            <password-encoder ref="passwordEncoder" />
        </authentication-provider>
        <authentication-provider ref="socialAuthenticationProvider"/>
    </authentication-manager>

    <beans:bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
    <beans:bean id="shaPasswordEncoder" class="org.springframework.security.authentication.encoding.ShaPasswordEncoder"/>
    <beans:bean id="md5Encoder" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder"/>

    <beans:bean id="socialAuthenticationFilter" class="org.springframework.social.security.SocialAuthenticationFilter">
        <beans:constructor-arg index="0" ref="authenticationManager"/>
        <beans:constructor-arg index="1" ref="userIdSource"/>
        <beans:constructor-arg index="2" ref="usersConnectionRepository"/>
        <beans:constructor-arg index="3" ref="connectionFactoryLocator"/>
        <!-- Sets the url of the registration form. -->
        <beans:property name="signupUrl" value="/user/register"/>
        <beans:property name="postLoginUrl" value="/user/register"/>
        <beans:property name="connectionAddedRedirectUrl" value="/user/register"/>
    </beans:bean>

    <!--
        Configures the social authentication provider which processes authentication requests
        made by using supported social authentication services (FB, Twitter and so on).
    -->
    <beans:bean id="socialAuthenticationProvider" class="org.springframework.social.security.SocialAuthenticationProvider">
        <beans:constructor-arg index="0" ref="usersConnectionRepository"/>
        <beans:constructor-arg index="1" ref="socialUserDetailsService"/>
    </beans:bean>

    <!--
        This bean is used to load the user specific data when social sign in
        is used.
    -->
    <beans:bean id="socialUserDetailsService" class="io.test.www.service.member.SimpleSocialUserDetailsService">
        <beans:constructor-arg index="0" ref="userDetailsService"/>
    </beans:bean>
    <!--
            This bean encrypts the authorization details of the connection. In
            our example, the authorization details are stored as plain text.
            DO NOT USE THIS IN PRODUCTION.
        -->
    <beans:bean id="textEncryptor" class="org.springframework.security.crypto.encrypt.Encryptors" factory-method="noOpText" />

    <!-- This bean is load the user specific data when form login is used. -->
    <beans:bean id="userDetailsService" class="io.test.www.service.member.RepositoryUserDetailsService" autowire="constructor"/>
    <!--
        This bean determines the account ID of the user. The example application
        uses the username as the account ID.
    -->
    <beans:bean id="userIdSource" class="org.springframework.social.security.AuthenticationNameUserIdSource"/>
</beans:beans>